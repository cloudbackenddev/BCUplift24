
1. What is the purpose of the Java Garbage Collector?
   a) To allocate memory for objects
   b) To release memory occupied by unused objects
   c) To optimize code execution
   d) To manage database connections

Answer 1. b) To release memory occupied by unused objects

2. Which part of the Java Virtual Machine (JVM) is responsible for garbage collection?
   a) Class Loader
   b) JVM Compiler
   c) Runtime Data Area
   d) Bytecode Verifier

Answer 2. b) JVM Compiler

3. How does the Garbage Collector determine if an object is eligible for garbage collection?
   a) By checking if the object is reachable
   b) By examining the object's reference count
   c) By the size of the object
   d) By the object's creation time

Answer 3. a) By checking if the object is reachable

4. Which of the following are Java Garbage Collection algorithms?
   a) Stack-based algorithm
   b) Mark-and-Sweep
   c) Bubble Sort
   d) Depth-First Search

Answer 4. b) Mark-and-Sweep

5. In Java, which part of the memory is managed by the Garbage Collector?
   a) Stack
   b) Heap
   c) Cache
   d) Register

Answer 5. b) Heap

6. Which of the following is not a generation in the generational garbage collection model?
   a) Young Generation
   b) Old Generation
   c) Infant Generation
   d) Permanent Generation

Answer 6. c) Infant Generation

7. What is a "stop-the-world" event in the context of Garbage Collection?
   a) A situation where the Garbage Collector runs concurrently with the application
   b) A situation where the application is paused while Garbage Collection is performed
   c) A situation where an object is pinned in memory
   d) A situation where Garbage Collection never occurs

Answer 7. b) A situation where the application is paused while Garbage Collection is performed

8. What is the purpose of the "System.gc()" method in Java?
   a) To explicitly trigger garbage collection
   b) To increase memory allocation for the JVM
   c) To reduce the memory footprint of an application
   d) To start a new JVM instance

Answer 8. a) To explicitly trigger garbage collection

9. Which garbage collection algorithm is typically used for the Young Generation in the JVM?
   a) Mark-and-Sweep
   b) Generational Garbage Collection
   c) Parallel Garbage Collection
   d) Concurrent Garbage Collection

Answer 9. a) Mark-and-Sweep

10. In the context of Garbage Collection, what is the PermGen (Permanent Generation) used for?
    a) Storing live objects
    b) Storing the heap
    c) Storing class metadata, such as classes and methods
    d) Managing thread pools

Answer 10. c) Storing class metadata, such as classes and methods


Subjective Questions:

11. Why Garbage Collection is necessary in Java?
Answer 11. Garabage Collecotr releases memory occupied by unused objects this helps new object to get memory.
	   And helps our program to run efficiently.

12. What is the drawback to Garbage Collection?
Answer 12. The drawback of Garbage Collection is that this requires a lot of time causing our program to work slower.


13. What do you mean by mark-and-sweep?
Answer 13. Mark-and-Sweep is a garbage collection algorithm, typically used for the Young Generation in the JVM.
	In marking process it checks if the object is reachable or not. If not then it sweeps or removes the object from that memory location.
	This helps new object to get memory.
	

14. What is the difference between Heap and Stack in Java?
Answer 14. Heap and Stack are memory locations in runtime data area.
	Heap = Heap stores the object references.
	       Heap is dynamic. It is not considered safe here as any thread can access it from here.

	Stack = Stack stores the local variable and methods;
		Stack is not dynamic. It is considered safe as every thread has its own stack.
	 	


15. Write a Stack Program.

Answer 15:

import java.util.ArrayList;
public class StackImplementation{
	public static void main(String[] args){
		Stack s = new Stack();
		s.push(5);
		s.push(10);
		s.peek();
		s.pop();
		s.peek();
	}
}


class Stack{
	ArrayList<Integer> stack = new ArrayList<Integer>();
	
	public void push(int num){
		stack.add(num);
	}

	public void pop(){
		if (stack.isEmpty()) {
			System.out.println("Stack underflow: stack is already empty");
			return;
		}
		stack.remove(stack.size()-1);
	}

	public void peek(){
		if (stack.isEmpty()) {
			System.out.println("Empty Stack");
			return;
		}
		System.out.println(stack.get(stack.size()-1));
	}

}