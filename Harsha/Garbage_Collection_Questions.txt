
1. What is the purpose of the Java Garbage Collector?
   a) To allocate memory for objects
   b) To release memory occupied by unused objects
   c) To optimize code execution
   d) To manage database connections
Ans: b

2. Which part of the Java Virtual Machine (JVM) is responsible for garbage collection?
   a) Class Loader
   b) JVM Compiler
   c) Runtime Data Area
   d) Bytecode Verifier
Ans: c

3. How does the Garbage Collector determine if an object is eligible for garbage collection?
   a) By checking if the object is reachable
   b) By examining the object's reference count
   c) By the size of the object
   d) By the object's creation time
Ans: a

4. Which of the following are Java Garbage Collection algorithms?
   a) Stack-based algorithm
   b) Mark-and-Sweep
   c) Bubble Sort
   d) Depth-First Search
Ans: b

5. In Java, which part of the memory is managed by the Garbage Collector?
   a) Stack
   b) Heap
   c) Cache
   d) Register
Ans: Heap

6. Which of the following is not a generation in the generational garbage collection model?
   a) Young Generation
   b) Old Generation
   c) Infant Generation
   d) Permanent Generation
Ans: c

7. What is a "stop-the-world" event in the context of Garbage Collection?
   a) A situation where the Garbage Collector runs concurrently with the application
   b) A situation where the application is paused while Garbage Collection is performed
   c) A situation where an object is pinned in memory
   d) A situation where Garbage Collection never occurs
Ans: d

8. What is the purpose of the "System.gc()" method in Java?
   a) To explicitly trigger garbage collection
   b) To increase memory allocation for the JVM
   c) To reduce the memory footprint of an application
   d) To start a new JVM instance
Ans: a

9. Which garbage collection algorithm is typically used for the Young Generation in the JVM?
   a) Mark-and-Sweep
   b) Generational Garbage Collection
   c) Parallel Garbage Collection
   d) Concurrent Garbage Collection
Ans: a

10. In the context of Garbage Collection, what is the PermGen (Permanent Generation) used for?
    a) Storing live objects
    b) Storing the heap
    c) Storing class metadata, such as classes and methods
    d) Managing thread pools
Ans: c


Subjective Questions:

11. Why Garbage Collection is necessary in Java?

Ans: Garbage collection is the process by which java program perform memory management automatically.   
When we execute the program object crete the memory in heap.But sometime some object will no longer needed for the program means some object remains unused 
throught the program and that time if we need more object to use we cannot have the enought memory that time gabage collector runs and it destroyed the unused object from heap to free the memory . 
After garbage collector runs we program can create usable objects on heap.
Garabage collector is neccessary in java to free up the heap memory by deleting unused object and to make memory more efficient.


12. What is the drawback to Garbage Collection?

Ans: Garbage collection impacts on performance of the program.When garbage collector executes program stops.  

13. What do you mean by mark-and-sweep?
Ans:  mark and sweep are Java Garbage Collection algorithms.

14. What is the difference between Heap and Stack in Java?

1) Stack : Stack is used to store method related variables and local variables. 
	   Stack excute fast.
	   Stack is static , fixed size.
	   Stack follow LIFO(last in first out) principle. 
	   pass by value.


2) Heap : Heap is used to store objects .
	  Heap excutes slow. 
	  Heap is dyanamic , not fixed size. 
	  pass by reference. 
	  Garbage collector is used to free up the memory.

15. Write a Stack Program.


public class Stack {

	int size;
	int[] array= new int[size]; 
	int top;

	public Stack(int size, int[] array, int top){

		this.size=size;
		this.int[] array= int [] array;
		this.top=top;
	}
	String push(int num){
		if (top== -1){
			return "Stack is overflow";
		}
		else{
			array[++top]= num;
		}
	}
	String pop(){
		if (top==-1){
			return "Stack is underflow";
		}
		else{
			int item= array[top--];
			return " The deleted item is" + ""+ item;
		}
	}
	 String peek(){
		if (top ==-1){
			return "The stack is empty";
		}
		else{
			int item= array[top--];
			return "peek item is" + "" + item;
		}
	}
	int display(){
		for (int i: array){
			System.out.println(i);
		}
	}
	public static void main(String[] args){
		Stack s= new Stack();
		
		s.push(1);
		s.push(2);

		s.display();
	}
}

			
	



