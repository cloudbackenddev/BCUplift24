
1. What is the purpose of the Java Garbage Collector?
   a) To allocate memory for objects
   b) To release memory occupied by unused objects
   c) To optimize code execution
   d) To manage database connections

Answer: b
2. Which part of the Java Virtual Machine (JVM) is responsible for garbage collection?
   a) Class Loader
   b) JVM Compiler
   c) Runtime Data Area
   d) Bytecode Verifier
Answer: c

3. How does the Garbage Collector determine if an object is eligible for garbage collection?
   a) By checking if the object is reachable
   b) By examining the object's reference count
   c) By the size of the object
   d) By the object's creation time
Answer:a

4. Which of the following are Java Garbage Collection algorithms?
   a) Stack-based algorithm
   b) Mark-and-Sweep
   c) Bubble Sort
   d) Depth-First Search
Answer: b
5. In Java, which part of the memory is managed by the Garbage Collector?
   a) Stack
   b) Heap
   c) Cache
   d) Register
Answer :b
6. Which of the following is not a generation in the generational garbage collection model?
   a) Young Generation
   b) Old Generation
   c) Infant Generation
   d) Permanent Generation
Answer c

7. What is a "stop-the-world" event in the context of Garbage Collection?
   a) A situation where the Garbage Collector runs concurrently with the application
   b) A situation where the application is paused while Garbage Collection is performed
   c) A situation where an object is pinned in memory
   d) A situation where Garbage Collection never occurs
Answer: b

8. What is the purpose of the "System.gc()" method in Java?
   a) To explicitly trigger garbage collection
   b) To increase memory allocation for the JVM
   c) To reduce the memory footprint of an application
   d) To start a new JVM instance
Answer: a

9. Which garbage collection algorithm is typically used for the Young Generation in the JVM?
   a) Mark-and-Sweep
   b) Generational Garbage Collection
   c) Parallel Garbage Collection
   d) Concurrent Garbage Collection
Answer: b
10. In the context of Garbage Collection, what is the PermGen (Permanent Generation) used for?
    a) Storing live objects
    b) Storing the heap
    c) Storing class metadata, such as classes and methods
    d) Managing thread pools

Answer: c
Subjective Questions:

11. Why Garbage Collection is necessary in Java?
Answer: 1.GArbage collection is used for automatic memory management and preventing memory leaks. It enables dynamic memory allocation and memory handling. This improves productivity,help us to manage our memory efficiently and supports dynamically . It simplifies memory management, enhances application reliability, and contributes to Java's platform independence by handling memory automatically, enabling efficient.


12. What is the drawback to Garbage Collection?
Answer: it introduces non-deterministic behavior in memory management. While automatic memory deallocation, improves developer productivity and reduces the risk of memory leaks, the process of garbage collection can lead to unpredictable pauses in application execution just because the situation where the application is paused while Garbage Collection is performed which impacts low-latency systems. And also  the overhead of identifying and collecting unreferenced objects can temporarily affect application performance.


13. What do you mean by mark-and-sweep?
Answer: Mark-and-sweep is algorithm of garbage collector,in the "Mark" phase, the algorithm traverses the object graph, marking reachable objects as "alive." The subsequent "Sweep" phase then deallocates memory occupied by unmarked, unreferenced objects.


14. What is the difference between Heap and Stack in Java?
Answer : Heap:
	The heap is a palce of the memory where Java objects are allocated.
	It is used for dynamic memory allocation and deallocation during the program's execution.
	Objects created using the new keyword in Java are stored in the heap.
	The heap is managed by the garbage collector, which automatically reclaims memory occupied by objects that are no longer referenced.

	Stack:

	The stack is a region of the memory that stores local variables and method call information for each thread.
	Each thread in a Java program has its own stack.
	Local variables, method parameters, and partial results of method calls are stored on the stack. When a method is called, a new frame is added to 	the top of the stack to store local variables for that method.
	The stack follows a Last-In-First-Out (LIFO) structure, where the most recently called method is at the top of the stack.

15. Write a Stack Program.
Answer: 
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayListStack stack = new ArrayListStack();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        stack.push(4);
        stack.push(5);
        stack.pop();

        while (!stack.isEmpty()) {
            System.out.println(stack.pop());
        }
    }
}

class ArrayListStack {
    public ArrayList<Integer> stack = new ArrayList<>();

    public void push(int value) {
        stack.add(value);
    }

    public int pop() {
        if (!stack.isEmpty()) {
            return stack.remove(stack.size() - 1);
        } else {
            System.out.println("Stack is empty.");
            return -1;
        }
    }

    public boolean isEmpty() {
        return stack.isEmpty();
    }
}

