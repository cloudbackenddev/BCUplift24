
1. What is the purpose of the Java Garbage Collector?
   a) To allocate memory for objects
   b) To release memory occupied by unused objects
   c) To optimize code execution
   d) To manage database connections
Answer =b) To release memory occupied by unused objects 


2. Which part of the Java Virtual Machine (JVM) is responsible for garbage collection?
   a) Class Loader
   b) JVM Compiler
   c) Runtime Data Area
   d) Bytecode Verifier
Answer = c) Runtime Data Area

3. How does the Garbage Collector determine if an object is eligible for garbage collection?
   a) By checking if the object is reachable
   b) By examining the object's reference count
   c) By the size of the object
   d) By the object's creation time
Answer = a) By checking if the object is reachable

4. Which of the following are Java Garbage Collection algorithms?
   a) Stack-based algorithm
   b) Mark-and-Sweep
   c) Bubble Sort
   d) Depth-First Search
Answer =    b) Mark-and-Sweep

5. In Java, which part of the memory is managed by the Garbage Collector?
   a) Stack
   b) Heap
   c) Cache
   d) Register
Answer =    b) Heap

6. Which of the following is not a generation in the generational garbage collection model?
   a) Young Generation
   b) Old Generation
   c) Infant Generation
   d) Permanent Generation
Answer =   c) Infant Generation

7. What is a "stop-the-world" event in the context of Garbage Collection?
   a) A situation where the Garbage Collector runs concurrently with the application
   b) A situation where the application is paused while Garbage Collection is performed
   c) A situation where an object is pinned in memory
   d) A situation where Garbage Collection never occurs
Answer =    b) A situation where the application is paused while Garbage Collection is performed

8. What is the purpose of the "System.gc()" method in Java?
   a) To explicitly trigger garbage collection
   b) To increase memory allocation for the JVM
   c) To reduce the memory footprint of an application
   d) To start a new JVM instance
Answer =    a) To explicitly trigger garbage collection

9. Which garbage collection algorithm is typically used for the Young Generation in the JVM?
   a) Mark-and-Sweep
   b) Generational Garbage Collection
   c) Parallel Garbage Collection
   d) Concurrent Garbage Collection
Answer =    c) Parallel Garbage Collection

10. In the context of Garbage Collection, what is the PermGen (Permanent Generation) used for?
    a) Storing live objects
    b) Storing the heap
    c) Storing class metadata, such as classes and methods
    d) Managing thread pools
Answer =    c) Storing class metadata, such as classes and methods


Subjective Questions:

11. Why Garbage Collection is necessary in Java?
	- To release memory occupied by unused objects

12. What is the drawback to Garbage Collection?
	-"stop-the-world": -A situation where the application is paused while Garbage Collection is performed

13. What do you mean by mark-and-sweep?
14. What is the difference between Heap and Stack in Java?
	1) Storage - 	Stack is small memory storage.
			Heap is big memory storage.
	2) Speed - 	Stack is access of element faster than heap.
			heap is access of element solwer comparision to stack.
	3) Allocation - In stack memory allocation and dellocation automatically.
			In heap it's dynamanically.
	4)Exception - 	In stack given exception of stackoverflowerror
			In heap given exception of outofmemoryerror

15. Write a Stack Program -
	class StackUsingArray{
		private int top;
		private int maxSize;
		private int [] strackArray;
		public StackUsingArray(int size){
			int maxSize = new int[size];
			top=-1;
		}
		public void push (int value){
			if (top <maxSize-1){
				return stackArray[++top]=value;			
			}
			else{
				System.out.println("Stack is empty");
			}
		}
	}

	public class StackProgram{
		public static void main(String[] args){
			StackUsingArray stackArray = new StackUsingArray(4);
			stackArray.push(1);
			stackArray.push(5);
			stackArray.push(3);
			stackArray.push(8);

		}
	}
