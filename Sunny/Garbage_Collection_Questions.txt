
1. What is the purpose of the Java Garbage Collector?
   a) To allocate memory for objects
   b) To release memory occupied by unused objects
   c) To optimize code execution
   d) To manage database connections

Ans - b) To release memory occupied by unused objects



2. Which part of the Java Virtual Machine (JVM) is responsible for garbage collection?
   a) Class Loader
   b) JVM Compiler
   c) Runtime Data Area
   d) Bytecode Verifier

Ans - c) Runtime Data Area

3. How does the Garbage Collector determine if an object is eligible for garbage collection?
   a) By checking if the object is reachable
   b) By examining the object's reference count
   c) By the size of the object
   d) By the object's creation time

Ans - a) By checking if the object is reachable


4. Which of the following are Java Garbage Collection algorithms?
   a) Stack-based algorithm
   b) Mark-and-Sweep
   c) Bubble Sort
   d) Depth-First Search

Ans - b) Mark-and-Sweep



5. In Java, which part of the memory is managed by the Garbage Collector?
   a) Stack
   b) Heap
   c) Cache
   d) Register

Ans - b)Heap

6. Which of the following is not a generation in the generational garbage collection model?
   a) Young Generation
   b) Old Generation
   c) Infant Generation
   d) Permanent Generation


Ans - c)Infant Generation

7. What is a "stop-the-world" event in the context of Garbage Collection?
   a) A situation where the Garbage Collector runs concurrently with the application
   b) A situation where the application is paused while Garbage Collection is performed
   c) A situation where an object is pinned in memory
   d) A situation where Garbage Collection never occurs


Ans - b) A sitiaution where the application is paused while Garbage Collection is Performed.



8. What is the purpose of the "System.gc()" method in Java?
   a) To explicitly trigger garbage collection
   b) To increase memory allocation for the JVM
   c) To reduce the memory footprint of an application
   d) To start a new JVM instance

Ans - a) To explicitly trigger garbage collection


9. Which garbage collection algorithm is typically used for the Young Generation in the JVM?
   a) Mark-and-Sweep
   b) Generational Garbage Collection
   c) Parallel Garbage Collection
   d) Concurrent Garbage Collection

Ans - c) Parallel Garbage Collection

10. In the context of Garbage Collection, what is the PermGen (Permanent Generation) used for?
    a) Storing live objects
    b) Storing the heap
    c) Storing class metadata, such as classes and methods
    d) Managing thread pools

Ans - c) Storing class metadata, Such as classes and methods.


Subjective Questions:

11. Why Garbage Collection is necessary in Java?
Ans - To avoid application Stoppage due to some memory Error. Garbage collection helps Automatic Memory Management which means    	          we do not have to free up space manually garbage collection do it automatically.


12. What is the drawback to Garbage Collection?
Ans - It can create Stop-World events.



13. What do you mean by mark-and-sweep?
Ans - mark and sweep also known as marking phase and sweeping phase means garbage collector marks objects that are not reachable or Unreachable in marking phase and in sweeping phase these marked objects are sweeped or Deallocated.


14. What is the difference between Heap and Stack in Java?
Ans - Difference between Heap and Stack are Heap stores objects and non-primitive data and Stack stores primitive data. stack is faster to use and heap is slower than Stack.




15. Write a Stack Program.

import java.util.ArrayList;
public class Stack{
	public static void main(String main[]){
	StackProgram a = new StackProgram();
	//System.out.println(a.IsEmpty());
	a.Push(5);
	a.Push(6);
	a.Push(7);
	a.Peek();
	a.Pop();
	a.Peek();
	



	}



}



class StackProgram{
	//ArrayList<Integer> a = new ArrayList<>();
	int[] stack = new int[20];
	int i = -1;

	public Boolean IsEmpty(){
		return i==-1;
	}
	



	 public void Push(int n){
		if (i<stack.length-1){
			stack[i+1] = n;
			i++;
			System.out.println("Item Pushed Succesfully to stack!");
		}else{
			System.out.println("Stack OverFlow Occured");
		}	
	

	}



	public void Pop(){
		if (!IsEmpty()){
			System.out.println("Element Popped!");
			i--;
		}

	}


	public void Peek(){
		System.out.println("Peek element is "+stack[i]);
	
	}


}